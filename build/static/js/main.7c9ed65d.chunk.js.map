{"version":3,"sources":["reducers/message.ts","reducers/application.ts","reducers/index.ts","components/UserIds.tsx","components/QueryAPI.tsx","actions/application.ts","actions/message.ts","components/InputBox.tsx","components/LoadingAnimation.tsx","components/Message.tsx","components/MessageList.tsx","components/Content.tsx","components/App.tsx","index.tsx"],"names":["initialMessagesState","reducer","state","action","type","text","id","uid","initialAppState","appState","payload","combineReducers","messages","messageReducer","application","appReducer","UIDs","user","cpu","INITIAL_CONFIG","server","operation","config","expression","this","encodeURIComponent","applicationChangeState","nextMessageId","addMessage","giveAnswer","message","dispatch","INITIAL_STATE","InputBox","props","focusedInput","undefined","focusInputBox","current","focus","React","createRef","waitForUserQuestion","event","setState","target","value","preventDefault","style","position","bottom","width","backgroundColor","onSubmit","handleSubmit","display","className","flex","onChange","handleChange","name","placeholder","ref","Component","connect","a","question","fetch","QueryAPIBuilder","build","then","response","json","result","answer","askQuestion","dots","LoadingAnimation","maxDots","newDots","length","intervalID","setInterval","timer","bind","clearInterval","Message","data","children","isUserMessage","isCpuMessage","classNames","MessageList","messagesEndlineRef","scrollToBottom","scrollIntoView","behavior","greetTheUser","map","m","i","key","isCPUAnswering","yMargins","marginTop","marginBottom","Content","Header","margin","textAlign","borderBottom","App","startApplication","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c9ed65d.chunk.js","sourcesContent":["/**\n * Implements the MessageState reducers.\n *\n * Handles React MessageState changes.\n */\n\nimport { Action } from \"../actions\";\nimport { MessageType } from \"../actions/message\";\n\nconst NO_MESSAGES: MessageType[] = [];\n\nexport type MessagesState = Readonly<MessageType[]>;\n\nexport const initialMessagesState: MessagesState = NO_MESSAGES;\n\n// FIXME: any fix\nconst reducer = (\n  state: MessagesState = initialMessagesState,\n  action: any\n): MessagesState => {\n  // export default function messageState(state: [], action: Action): MessagesState {\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return [\n        ...state,\n        {\n          text: action.text,\n          id: action.id,\n          uid: action.uid\n        }\n      ];\n    case \"GET_MESSAGES\":\n      return [...state];\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ApplicationState } from \"../actions/application\";\n\n/**\n * Implements the ApplicationState reducer.\n *\n * Handles React ApplicationState changes.\n */\nexport type AppState = Readonly<{\n  appState: ApplicationState;\n}>;\n\nexport const initialAppState: AppState = {\n  appState: \"greeting\"\n};\n\n// FIXME: any fix\nconst reducer = (state: AppState = initialAppState, action: any): AppState => {\n  // export default function messageState(state: [], action: Action): MessagesState {\n  switch (action.type) {\n    case \"APP_STATE_CHANGE\":\n      return {\n        ...state,\n        appState: action.payload\n      };\n    case \"APPLICATION_START\":\n      return initialAppState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport messageReducer from \"./message\";\nimport appReducer from \"./application\";\nimport { GlobalState } from \"./types\";\nimport { Action } from \"../actions\";\n\nexport default combineReducers<GlobalState, Action>({\n  messages: messageReducer,\n  application: appReducer\n});\n","export type UidType = number;\n\nconst UIDs: { [key: string]: UidType } = {\n  user: 1,\n  cpu: 2\n};\n\nexport default UIDs;\n","export type QueryAPIConfigType = {\n  server?: string;\n  operation?: string;\n};\n\nexport type QueryAPIRequest = string;\n\n// This type follows documentation listed here:\n// https://newton.now.sh/\nexport type QueryAPIResponse =  {\n  operation: string,\n  expression: string,\n  result: string\n};\n\nconst INITIAL_CONFIG = {\n  server: \"https://newton.now.sh\",\n  operation: \"simplify\"\n};\n\n/**\n * Build URL needed to communicate with endpoint.\n *\n * Example:\n * https://newton.now.sh/:operation/:expression\n */\nclass QueryAPIBuilder {\n  config: QueryAPIConfigType = INITIAL_CONFIG;\n\n  public build(expression: string): QueryAPIRequest {\n    return `/api/${this.config.operation}/${encodeURIComponent(expression)}`;\n  }\n}\n\nexport default new QueryAPIBuilder();","/**\n * Action types and action creator related to the Application.\n */\n\nexport const startApplication = () => ({\n  type: \"APPLICATION_START\"\n});\n\nexport type ApplicationState =\n  | \"greeting\"\n  | \"waiting for user question\"\n  | \"answering the user\";\n\nexport const applicationChangeState = (payload: ApplicationState) => ({\n  type: \"APP_STATE_CHANGE\",\n  payload\n});\n\nexport type ApplicationActions =\n  | ReturnType<typeof startApplication>\n  | ReturnType<typeof applicationChangeState>;\n","import UIDs from \"../components/UserIds\";\nimport { Action } from \"redux\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { initialMessagesState } from \"../reducers/message\";\nimport QueryAPIBuilder, { QueryAPIResponse } from \"../components/QueryAPI\";\nimport { applicationChangeState } from \"./application\";\n\ntype MyRootState = typeof initialMessagesState;\ntype MyExtraArg = undefined;\ntype MyThunkResult<R> = ThunkAction<R, MyRootState, MyExtraArg, Action>;\n// Next Line:\n// It is important to use Action as last type argument, does not work with any.\nexport type MyThunkDispatch = ThunkDispatch<MyRootState, MyExtraArg, Action>;\n\nlet nextMessageId = 0;\n\nexport const addMessage = (text: string, uid: number) => ({\n  type: \"ADD_MESSAGE\",\n  text,\n  id: nextMessageId++,\n  uid\n});\n\nexport const getMessages = () => ({\n  type: \"GET_MESSAGES\"\n});\n\nexport const getMessage = (id: number) => ({\n  type: \"GET_MESSAGE\",\n  id\n});\n\nconst fetchAnswer = (question: string): Promise<string> => {\n  return fetch(QueryAPIBuilder.build(question))\n    .then((response: Response) => response.json())\n    .then((response: QueryAPIResponse) => response.result);\n};\n\nexport const askQuestion = (message: string): MyThunkResult<Promise<void>> => {\n  return async (dispatch: MyThunkDispatch): Promise<void> => {\n    dispatch(addMessage(message, UIDs.user));\n    dispatch(applicationChangeState(\"answering the user\"));\n    const answer = await fetchAnswer(message);\n    dispatch(giveAnswer(answer));\n  };\n};\n\nexport const giveAnswer = (message: string): MyThunkResult<void> => {\n  return (dispatch: MyThunkDispatch): void => {\n    dispatch(addMessage(message, UIDs.cpu));\n    dispatch(applicationChangeState(\"waiting for user question\"));\n  };\n};\n\nexport type MessageType = {\n  text: string;\n  id: number;\n  uid: number;\n};\n\nexport type MessageActions =\n  | ReturnType<typeof addMessage>\n  | ReturnType<typeof getMessages>\n  | ReturnType<typeof getMessage>;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport { askQuestion } from \"../actions/message\";\nimport { applicationChangeState } from \"../actions/application\";\n\ntype OwnState = {\n  message: string;\n};\n\ntype Props = ReturnType<typeof mapDispatchToProps>;\n\nconst INITIAL_STATE = { message: \"\" };\n\nclass InputBox extends React.Component<Props, OwnState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.focusedInput = React.createRef();\n  }\n\n  focusedInput: React.RefObject<HTMLInputElement> | undefined = undefined;\n\n  componentDidMount() {\n    this.props.waitForUserQuestion();\n  }\n\n  private handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ message: event.target.value });\n  }\n\n  private handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    this.props.addMessage(this.state.message);\n    this.setState(INITIAL_STATE);\n    this.focusInputBox();\n  }\n\n  private focusInputBox = () => {\n    this.focusedInput &&\n      this.focusedInput.current &&\n      this.focusedInput.current.focus();\n  };\n  render() {\n    const { message } = this.state;\n\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"white\"\n        }}\n      >\n        <form\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) =>\n            this.handleSubmit(event)\n          }\n          style={{ display: \"flex\" }}\n        >\n          <div className=\"nes-field\" style={{ flex: 1 }}>\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                this.handleChange(event)\n              }\n              name=\"message\"\n              className=\"nes-input\"\n              placeholder=\"Type your question here\"\n              ref={this.focusedInput}\n            />\n          </div>\n          <div className=\"nes-field\">\n            <input type=\"submit\" value=\"Send\" className=\"nes-btn is-primary\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  addMessage: (message: string) => dispatch(askQuestion(message)),\n  waitForUserQuestion: () =>\n    dispatch(applicationChangeState(\"waiting for user question\"))\n});\n\nexport default connect(null, mapDispatchToProps)(InputBox);\n","import React from \"react\";\n\ntype IntervalID = NodeJS.Timeout;\n\ntype OwnState = {\n  dots: string;\n  intervalID?: IntervalID;\n};\n\ntype OwnProps = {};\n\nconst INITIAL_STATE = {\n  dots: \"\"\n};\n\nconst DOTS_DELAY = 750; //ms\n\nexport default class LoadingAnimation extends React.Component<\n  OwnProps,\n  OwnState\n> {\n  constructor(props: OwnProps) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.maxDots = 3;\n  }\n\n  maxDots: number = 3;\n\n  private timer() {\n    const newDots =\n      this.state.dots.length === this.maxDots ? \"\" : this.state.dots + \".\";\n\n    this.setState({ dots: newDots });\n  }\n\n  componentDidMount() {\n    const intervalID = setInterval(this.timer.bind(this), DOTS_DELAY);\n    this.setState({ intervalID });\n  }\n\n  componentWillUnmount() {\n    this.state.intervalID && clearInterval(this.state.intervalID);\n  }\n\n  render() {\n    const { dots } = this.state;\n    return <div>{dots}</div>;\n  }\n}\n","import React from \"react\";\nimport { MessageType } from \"../actions/message\";\nimport classNames from \"classnames\";\nimport UIDs from \"./UserIds\";\n\ntype OwnProps = {\n  data?: MessageType;\n};\n\nconst Message: React.FunctionComponent<OwnProps> = ({ data, children }) => {\n  const isUserMessage = data && data.uid === UIDs.user;\n  const isCpuMessage = !isUserMessage;\n\n  return (\n    <section\n      className={classNames(\"message\", isCpuMessage ? \"-left\" : \"-right\")}\n    >\n      {isCpuMessage && <i className=\"nes-mario\"></i>}\n      <div\n        className={classNames(\n          \"nes-balloon\",\n          { \"from-left\": isCpuMessage },\n          { \"from-right\": isUserMessage }\n        )}\n      >\n        {children}\n        {data && <p>{data.text}</p>}\n      </div>\n      {isUserMessage && <i className=\"nes-bcrikko\"></i>}\n    </section>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { GlobalState } from \"../reducers/types\";\nimport LoadingAnimation from \"./LoadingAnimation\";\nimport { giveAnswer } from \"../actions/message\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport Message from \"./Message\";\n\ntype OwnProps = { style?: React.CSSProperties };\n\ntype Props = OwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nclass MessageList extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.messagesEndlineRef = React.createRef();\n  }\n\n  messagesEndlineRef: React.RefObject<HTMLDivElement> | undefined = undefined;\n\n  componentDidMount() {\n    this.props.greetTheUser();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  private scrollToBottom = () => {\n    this.messagesEndlineRef &&\n      this.messagesEndlineRef.current &&\n      this.messagesEndlineRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  render() {\n    const messages = this.props.messages;\n\n    return (\n      <section className=\"nes-container with-title\" style={this.props.style}>\n        <p className=\"title\">Messages</p>\n        <section className=\"message-list\">\n          {messages.map((m, i) => (\n            <Message data={m} key={m.id} />\n          ))}\n          {this.props.isCPUAnswering && (\n            <Message>\n              <LoadingAnimation />\n            </Message>\n          )}\n        </section>\n        <div ref={this.messagesEndlineRef}></div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  messages: state.messages,\n  isCPUAnswering: state.application.appState === \"answering the user\"\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  greetTheUser: () =>\n    dispatch(\n      giveAnswer(\n        \"Hello! I'm the nerd. Challenge me asking to solve any mathematical operation you want! I'll surprise you...\"\n      )\n    )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);\n","import React from \"react\";\nimport InputBox from \"./InputBox\";\nimport MessageList from \"./MessageList\";\n\nconst style = {\n  yMargins: {\n    marginTop: \"2rem\",\n    marginBottom: \"4rem\"\n  }\n};\n\nexport default function Content() {\n  return (\n    <div>\n      <MessageList style={style.yMargins} />\n      <InputBox />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Content from \"./Content\";\nimport { connect } from \"react-redux\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport { startApplication } from \"../actions/application\";\n\ntype Props = ReturnType<typeof mapDispatchToProps>;\n\nfunction Header() {\n  return (\n    <header>\n      <div\n        style={{\n          margin: \"1rem 0\",\n          textAlign: \"center\",\n          borderBottom: \"2px solid black\"\n        }}\n      >\n        <h1>Beat the Nerd</h1>\n      </div>\n    </header>\n  );\n}\n\nclass App extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Content />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  startApplication: () => dispatch(startApplication())\n});\n\nexport default connect(mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from \"./reducers\";\nimport App from \"./components/App\";\nimport \"../node_modules/nes.css/css/nes.css\";\nimport \"./nes.custom.css\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}