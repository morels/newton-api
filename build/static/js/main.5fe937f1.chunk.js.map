{"version":3,"sources":["reducers/message.ts","reducers/application.ts","reducers/index.ts","components/UserIds.tsx","components/NewtonAPI.ts","components/FunFactsAPI.ts","actions/application.ts","components/Error.ts","utils/fetchWithTO.ts","actions/message.ts","components/InputBox.tsx","components/LoadingAnimation.tsx","components/Message.tsx","components/MessageList.tsx","components/Content.tsx","components/App.tsx","index.tsx"],"names":["initialMessagesState","reducer","state","action","type","text","id","length","uid","initialAppState","appState","payload","combineReducers","messages","messageReducer","application","appReducer","UIDs","user","cpu","INITIAL_CONFIG","server","operation","config","expression","this","encodeURIComponent","availableOperations","numberAsString","isRandomizationRequested","Math","round","random","applicationChangeState","Error","message","isError","a","undefined","fetchWithTO","fetchInput","FETCH_TIMEOUT","didTimeOut","Promise","resolve","reject","timeout","setTimeout","fetch","then","response","clearTimeout","status","statusText","catch","err","addMessage","isNaturalPositive","numberAsNumber","Number","isNaN","trunc","tellFunFact","dispatch","question","FunFactsAPIBuilder","build","error","answerOrError","giveAnswer","getState","INITIAL_STATE","InputBox","props","focusedInput","focusInputBox","current","focus","React","createRef","waitForUserQuestion","event","setState","target","value","preventDefault","style","position","bottom","width","backgroundColor","onSubmit","handleSubmit","display","className","flex","onChange","handleChange","name","placeholder","ref","Component","connect","NewtonAPIBuilder","json","result","askQuestion","dots","LoadingAnimation","maxDots","newDots","intervalID","setInterval","timer","bind","clearInterval","Message","data","children","isUserMessage","isCpuMessage","classNames","MessageList","messagesEndlineRef","scrollToBottom","scrollIntoView","behavior","greetTheUser","map","m","i","key","isCPUAnswering","yMargins","marginTop","marginBottom","Content","Header","margin","textAlign","borderBottom","App","startApplication","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fe937f1.chunk.js","sourcesContent":["/**\n * Implements the MessageState reducers.\n *\n * Handles React MessageState changes.\n */\n\nimport { Action } from \"../actions\";\nimport { MessageType } from \"../actions/message\";\n\nconst NO_MESSAGES: MessageType[] = [];\n\nexport type MessagesState = Readonly<MessageType[]>;\n\nexport const initialMessagesState: MessagesState = NO_MESSAGES;\n\n// FIXME: any fix\nconst reducer = (\n  state: MessagesState = initialMessagesState,\n  action: any\n): MessagesState => {\n  // export default function messageState(state: [], action: Action): MessagesState {\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return [\n        ...state,\n        {\n          text: action.text,\n          id: state.length,\n          uid: action.uid\n        }\n      ];\n    case \"GET_MESSAGES\":\n      return [...state];\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { ApplicationState } from \"../actions/application\";\n\n/**\n * Implements the ApplicationState reducer.\n *\n * Handles React ApplicationState changes.\n */\nexport type AppState = Readonly<{\n  appState: ApplicationState;\n}>;\n\nexport const initialAppState: AppState = {\n  appState: \"greeting\"\n};\n\n// FIXME: any fix\nconst reducer = (state: AppState = initialAppState, action: any): AppState => {\n  // export default function messageState(state: [], action: Action): MessagesState {\n  switch (action.type) {\n    case \"APP_STATE_CHANGE\":\n      return {\n        ...state,\n        appState: action.payload\n      };\n    case \"APPLICATION_START\":\n      return initialAppState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport messageReducer from \"./message\";\nimport appReducer from \"./application\";\nimport { GlobalState } from \"./types\";\nimport { Action } from \"../actions\";\n\nexport default combineReducers<GlobalState, Action>({\n  messages: messageReducer,\n  application: appReducer\n});\n","export type UidType = number;\n\nconst UIDs: { [key: string]: UidType } = {\n  user: 1,\n  cpu: 2\n};\n\nexport default UIDs;\n","export type NewtonAPIConfigType = {\n  server?: string;\n  operation?: string;\n};\n\nexport type NewtonAPIRequest = string;\n\n// This type follows documentation listed here:\n// https://newton.now.sh/\nexport type NewtonAPIResponse =  {\n  operation: string,\n  expression: string,\n  result: string\n};\n\nconst INITIAL_CONFIG = {\n  server: \"https://newton-api.herokuapp.com\",\n  operation: \"simplify\"\n};\n\n/**\n * Build URL needed to communicate with endpoint.\n *\n * Example:\n * https://newton.now.sh/:operation/:expression\n */\nclass NewtonAPIBuilder {\n  config: NewtonAPIConfigType = INITIAL_CONFIG;\n\n  public build(expression: string): NewtonAPIRequest {\n    return `${this.config.server}/api/${this.config.operation}/${encodeURIComponent(expression)}`;\n  }\n}\n\nexport default new NewtonAPIBuilder();","type OperationType = \"math\" | \"trivia\";\n\nexport type FunFactsAPIConfigType = {\n  server?: string;\n  operation?: OperationType;\n};\n\nexport type FunFactsAPIRequest = string;\n\nconst INITIAL_CONFIG: {\n  server: string;\n  operation: OperationType;\n} = {\n  server: \"http://numbersapi.com\",\n  operation: \"math\"\n};\n\nconst availableOperations: OperationType[] = [\"math\", \"trivia\"];\n\nconst randomOperation = (): OperationType =>\n  availableOperations[Math.round(Math.random())];\n/**\n * Build URL needed to communicate with endpoint.\n *\n * Example:\n * http://numbersapi.com/:number/:operation\n */\nclass FunFactsAPIBuilder {\n  config: FunFactsAPIConfigType = INITIAL_CONFIG;\n\n  public build(\n    numberAsString: string,\n    isRandomizationRequested?: boolean\n  ): FunFactsAPIRequest {\n    return `${this.config.server}/${encodeURIComponent(numberAsString)}/${\n      isRandomizationRequested ? randomOperation() : this.config.operation\n    }`;\n  }\n}\n\nexport default new FunFactsAPIBuilder();\n","/**\n * Action types and action creator related to the Application.\n */\n\nexport const startApplication = () => ({\n  type: \"APPLICATION_START\"\n});\n\nexport type ApplicationState =\n  | \"greeting\"\n  | \"waiting for user question\"\n  | \"answering the user\"\n  | \"searching fun fact\";\n\nexport const applicationChangeState = (payload: ApplicationState) => ({\n  type: \"APP_STATE_CHANGE\",\n  payload\n});\n\nexport type ApplicationActions =\n  | ReturnType<typeof startApplication>\n  | ReturnType<typeof applicationChangeState>;\n","export default class Error {\n  message: string;\n  constructor(message: string) {\n    this.message = message;\n  }\n}\n\nexport function isError(a: string | Error): a is Error {\n  return (a as Error).message !== undefined;\n}\n","type FetchInputType = Parameters<typeof fetch>;\ntype FetchOuputType = ReturnType<typeof fetch>;\n\nexport function fetchWithTO(...fetchInput: FetchInputType): FetchOuputType {\n  const FETCH_TIMEOUT = 5000;\n  let didTimeOut = false;\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(function() {\n      didTimeOut = true;\n      reject(new Error(\"Request timed out\"));\n    }, FETCH_TIMEOUT);\n\n    fetch(...fetchInput)\n      .then(function(response: Response) {\n        // Clear the timeout as cleanup\n        clearTimeout(timeout);\n        if (!didTimeOut) {\n          response.status === 200\n            ? resolve(response)\n            : reject(new Error(`${response.status} ${response.statusText}`));\n        }\n      })\n      .catch(function(err) {\n        // Rejection already happened with setTimeout\n        if (didTimeOut) return;\n        // Reject with error\n        reject(err);\n      });\n  });\n}\n","import UIDs from \"../components/UserIds\";\nimport { Action } from \"redux\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport {\n  initialMessagesState\n} from \"../reducers/message\";\nimport NewtonAPIBuilder, { NewtonAPIResponse } from \"../components/NewtonAPI\";\nimport FunFactsAPIBuilder from \"../components/FunFactsAPI\";\nimport { applicationChangeState } from \"./application\";\nimport Error, { isError } from \"../components/Error\";\nimport { fetchWithTO } from \"../utils/fetchWithTO\";\n\ntype MyRootState = typeof initialMessagesState;\ntype MyExtraArg = undefined;\ntype MyThunkResult<R> = ThunkAction<R, MyRootState, MyExtraArg, Action>;\n// Next Line:\n// It is important to use Action as last type argument, does not work with any.\nexport type MyThunkDispatch = ThunkDispatch<MyRootState, MyExtraArg, Action>;\n\ntype MessageContentType = Pick<MessageType, \"text\" | \"uid\">;\n\nexport const addMessage = (text: string, uid: number) => ({\n  type: \"ADD_MESSAGE\",\n  text,\n  uid\n});\n\nexport const getMessages = () => ({\n  type: \"GET_MESSAGES\"\n});\n\nconst fetchNewtonAnswer = (question: string): Promise<string | Error> => {\n  return fetchWithTO(NewtonAPIBuilder.build(question))\n    .then((response: Response) => response.json())\n    .then((response: NewtonAPIResponse) => response.result)\n    .catch((error: string) => {\n      return new Error(error);\n    });\n};\n\nconst fetchFunFactAnswer = (question: string): Promise<string | Error> => {\n  const IS_RANDOMIZATION_REQUESTED = true;\n  return fetchWithTO(\n    FunFactsAPIBuilder.build(question, IS_RANDOMIZATION_REQUESTED)\n  )\n    .then((response: Response) => response.text())\n    .catch((error: string) => {\n      return new Error(error);\n    });\n};\n\nconst isNaturalPositive = (numberAsString: string): boolean => {\n  const numberAsNumber = Number(numberAsString);\n  return isNaN(numberAsNumber)\n    ? false\n    : numberAsNumber >= 0 && numberAsNumber === Math.trunc(numberAsNumber);\n};\n\nexport const askQuestion = (message: string): MyThunkResult<Promise<void>> => {\n  return async (dispatch: MyThunkDispatch): Promise<void> => {\n    dispatch(addMessage(message, UIDs.user));\n    dispatch(applicationChangeState(\"answering the user\"));\n    const answerOrError = await fetchNewtonAnswer(message);\n    if (isError(answerOrError)) {\n      dispatch(giveAnswer(\"Oh no, I don't know\"));\n    } else if (isNaturalPositive(answerOrError)) {\n      dispatch(addMessage(answerOrError, UIDs.cpu));\n      dispatch(tellFunFact(answerOrError));\n    } else {\n      dispatch(giveAnswer(answerOrError));\n    }\n  };\n};\n\nexport const tellFunFact = (message: string): MyThunkResult<Promise<void>> => {\n  return async (dispatch: MyThunkDispatch): Promise<void> => {\n    dispatch(applicationChangeState(\"searching fun fact\"));\n    const answerOrError = await fetchFunFactAnswer(message);    \n    dispatch(\n      giveAnswer(\n        isError(answerOrError)\n          ? \"Mmh, never mind.\"\n          : `Hey! ${answerOrError} Mind it!`\n      )\n    );\n  };\n};\n\nexport const giveAnswer = (message: string): MyThunkResult<void> => {\n  return (dispatch: MyThunkDispatch, getState: () => MyRootState): void => {\n    dispatch(addMessage(message, UIDs.cpu));\n    dispatch(applicationChangeState(\"waiting for user question\"));\n  };\n};\n\nexport type MessageType = {\n  text: string;\n  id: number;\n  uid: number;\n};\n\nexport type MessageActions =\n  | ReturnType<typeof addMessage>\n  | ReturnType<typeof getMessages>;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport { askQuestion } from \"../actions/message\";\nimport { applicationChangeState } from \"../actions/application\";\n\ntype OwnState = {\n  message: string;\n};\n\ntype Props = ReturnType<typeof mapDispatchToProps>;\n\nconst INITIAL_STATE = { message: \"\" };\n\nclass InputBox extends React.Component<Props, OwnState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.focusedInput = React.createRef();\n  }\n\n  focusedInput: React.RefObject<HTMLInputElement> | undefined = undefined;\n\n  componentDidMount() {\n    this.props.waitForUserQuestion();\n  }\n\n  private handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ message: event.target.value });\n  }\n\n  private handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    this.props.addMessage(this.state.message);\n    this.setState(INITIAL_STATE);\n    this.focusInputBox();\n  }\n\n  private focusInputBox = () => {\n    this.focusedInput &&\n      this.focusedInput.current &&\n      this.focusedInput.current.focus();\n  };\n  render() {\n    const { message } = this.state;\n\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"white\"\n        }}\n      >\n        <form\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) =>\n            this.handleSubmit(event)\n          }\n          style={{ display: \"flex\" }}\n        >\n          <div className=\"nes-field\" style={{ flex: 1 }}>\n            <input\n              type=\"text\"\n              value={message}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                this.handleChange(event)\n              }\n              name=\"message\"\n              className=\"nes-input\"\n              placeholder=\"Type your question here\"\n              ref={this.focusedInput}\n            />\n          </div>\n          <div className=\"nes-field\">\n            <input type=\"submit\" value=\"Send\" className=\"nes-btn is-primary\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  addMessage: (message: string) => dispatch(askQuestion(message)),\n  waitForUserQuestion: () =>\n    dispatch(applicationChangeState(\"waiting for user question\"))\n});\n\nexport default connect(null, mapDispatchToProps)(InputBox);\n","import React from \"react\";\n\ntype IntervalID = NodeJS.Timeout;\n\ntype OwnState = {\n  dots: string;\n  intervalID?: IntervalID;\n};\n\ntype OwnProps = {};\n\nconst INITIAL_STATE = {\n  dots: \"\"\n};\n\nconst DOTS_DELAY = 750; //ms\n\nexport default class LoadingAnimation extends React.Component<\n  OwnProps,\n  OwnState\n> {\n  constructor(props: OwnProps) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.maxDots = 3;\n  }\n\n  maxDots: number = 3;\n\n  private timer() {\n    const newDots =\n      this.state.dots.length === this.maxDots ? \"\" : this.state.dots + \".\";\n\n    this.setState({ dots: newDots });\n  }\n\n  componentDidMount() {\n    const intervalID = setInterval(this.timer.bind(this), DOTS_DELAY);\n    this.setState({ intervalID });\n  }\n\n  componentWillUnmount() {\n    this.state.intervalID && clearInterval(this.state.intervalID);\n  }\n\n  render() {\n    const { dots } = this.state;\n    return <div>{dots}</div>;\n  }\n}\n","import React from \"react\";\nimport { MessageType } from \"../actions/message\";\nimport classNames from \"classnames\";\nimport UIDs from \"./UserIds\";\n\ntype OwnProps = {\n  data?: MessageType;\n};\n\nconst Message: React.FunctionComponent<OwnProps> = ({ data, children }) => {\n  const isUserMessage = data && data.uid === UIDs.user;\n  const isCpuMessage = !isUserMessage;\n\n  return (\n    <section\n      className={classNames(\"message\", isCpuMessage ? \"-left\" : \"-right\")}\n    >\n      {isCpuMessage && <i className=\"nes-mario\"></i>}\n      <div\n        className={classNames(\n          \"nes-balloon\",\n          { \"from-left\": isCpuMessage },\n          { \"from-right\": isUserMessage }\n        )}\n      >\n        {children}\n        {data && <p>{data.text}</p>}\n      </div>\n      {isUserMessage && <i className=\"nes-bcrikko\"></i>}\n    </section>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { GlobalState } from \"../reducers/types\";\nimport LoadingAnimation from \"./LoadingAnimation\";\nimport { giveAnswer } from \"../actions/message\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport Message from \"./Message\";\n\ntype OwnProps = { style?: React.CSSProperties };\n\ntype Props = OwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nclass MessageList extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.messagesEndlineRef = React.createRef();\n  }\n\n  messagesEndlineRef: React.RefObject<HTMLDivElement> | undefined = undefined;\n\n  componentDidMount() {\n    this.props.greetTheUser();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  private scrollToBottom = () => {\n    this.messagesEndlineRef &&\n      this.messagesEndlineRef.current &&\n      this.messagesEndlineRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  render() {\n    const messages = this.props.messages;\n\n    return (\n      <section className=\"nes-container with-title\" style={this.props.style}>\n        <p className=\"title\">Messages</p>\n        <section className=\"message-list\">\n          {messages.map((m, i) => (\n            <Message data={m} key={m.id} />\n          ))}\n          {this.props.isCPUAnswering && (\n            <Message>\n              <LoadingAnimation />\n            </Message>\n          )}\n        </section>\n        <div ref={this.messagesEndlineRef}></div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  messages: state.messages,\n  isCPUAnswering:\n    state.application.appState === \"answering the user\" ||\n    state.application.appState === \"searching fun fact\"\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  greetTheUser: () =>\n    dispatch(\n      giveAnswer(\n        \"Hello! I'm the nerd. Challenge me asking to solve any mathematical operation you want! I'll surprise you...\"\n      )\n    )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);\n","import React from \"react\";\nimport InputBox from \"./InputBox\";\nimport MessageList from \"./MessageList\";\n\nconst style = {\n  yMargins: {\n    marginTop: \"2rem\",\n    marginBottom: \"4rem\"\n  }\n};\n\nexport default function Content() {\n  return (\n    <div>\n      <MessageList style={style.yMargins} />\n      <InputBox />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Content from \"./Content\";\nimport { connect } from \"react-redux\";\nimport { MyThunkDispatch as Dispatch } from \"../actions/message\";\nimport { startApplication } from \"../actions/application\";\n\ntype Props = ReturnType<typeof mapDispatchToProps>;\n\nfunction Header() {\n  return (\n    <header>\n      <div\n        style={{\n          margin: \"1rem 0\",\n          textAlign: \"center\",\n          borderBottom: \"2px solid black\"\n        }}\n      >\n        <h1>Beat the Nerd</h1>\n      </div>\n    </header>\n  );\n}\n\nclass App extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Content />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  startApplication: () => dispatch(startApplication())\n});\n\nexport default connect(mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from \"./reducers\";\nimport App from \"./components/App\";\nimport \"../node_modules/nes.css/css/nes.css\";\nimport \"./nes.custom.css\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}